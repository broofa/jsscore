{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Jsscore","body":"### What is a JS-Score?\r\nA JS-Score is simple measure of Javascript performance.  [Find out your score](http://jsscore.org)!\r\n\r\n### How are JS-Scores calculated?\r\nJS-Scores are determined by finding `jsscore` such that ...\r\n\r\n    for (var i = 0, n = Math.pow(10, jsscore); i < n; i++) {}\r\n\r\n... will take exactly 1-second to run.\r\n\r\nIn other words, a JS-Scores is the base-10 log of how quickly an empty for-loop runs, as measured in iterations/second.\r\n\r\nWant some code?  Here's [the reference jsscore() implementation](https://gist.github.com/3056769)\r\n\r\n### What does a JS-Score *mean*?\r\nJS-Scores are measured on a base-10 logarithmic scale, meaning each full-point difference in score represents a 10X multiple in for-loop speed (while a half-point difference represents a ~3X multiple).\r\n\r\nIn absolute terms, if a device - say an iPhone4  running Safari 5.1 - has a JS-Score of 8, we know it's capable of doing ~100M iterations/second.  And if we further find that another device - perhaps a Macbook Pro running Chrome 20 - has a score of 9, we know it has 10X the performance (at least where empty for-loops are concerned).  Or, conversely, if we find IE6 running in a VMWare instance has a score of 7, we can say it has performs roughly 10% as well as the iPhone+Safari, or 1% as well as the Macbook+Chrome.\r\n\r\nMake sense?\r\n\r\n### What's a JS-Score used for?\r\nIt's hoped that JS-Scores can serve at least two purposes:\r\n\r\n  1. Provide a basis for device+browser performance when discussing 3rd-party benchmark data\r\n  2. Enable performance-based feature customization in web apps\r\n\r\n### \"But empty for-loop performance isn't useful!\"\r\nYes... and no.  An empty for-loop is the simplest possible benchmark construct.  As such, it's trivial for interpreters to optimize (i.e. it's as good an indicator of raw hardware performance as we have in Javascript-land).  It is also trivially easy to implement, meaning it's possible to compute a JS-Score on *any* JS-enabled device.","google":"","tagline":"A simple measure of Javascript performance"}